<!DOCTYPE html>
<style>
img {
   max-width: 100%;
   height: auto;
   width: auto\9;
}
.blink, .high_info_display, .medium_info_display, .low_info_display{
   text-align: center;
   margin: 10%;
   padding: 1%;
   width: 70%;
   height: 40%;
   color: whitesmoke;
   border-radius: 15px;
   vertical-align: top;
   border: 5px solid #666;
}

.high_info_display:hover, .medium_info_display:hover, .low_info_display:hover{
   cursor: pointer;
   transition: 0.3s ease;
   filter: brightness(110%);
}


body{
   background-color: #5f5f61 !important;
}
@keyframes blinking {
   0% {
      background-color: black;
      border: 3px solid #666;
   }
   100% {
      background-color: red;
      border: 3px solid #666;
   }
}
.blink {
        animation: blinking 1s infinite;
      }

.vuln_container{
   color: white;
   margin-top: -3%;
   width: 100%;
   height: 100%;
   padding: 2%;
   margin: 10%;
   padding-top: 0.2%;
   border-radius: 20px;
   background-color: #2e3683;
}

p{
   margin-left: 5%;
   color: white;
   font-size: 25px;

}



/*New switch*/
.scan_type_switch{
   position: relative;
   display: inline-block;
   width: 150px;
   height: 34px;
   margin-left:auto;
   margin-top: 1%;
   margin-right: 3%;
   
}

.scan_type_switch input{
opacity: 0;
  width: 0;
  height: 0;
}

.scan_type_slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #0982f3;
  -webkit-transition: .4s;
  transition: .4s;
}

.scan_type_slider.round {
  border-radius: 34px;
}

.scan_type_slider.round:before {
  border-radius: 50%;
}

.scan_type_slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .9s ease;
  transition: .9s ease;
}

input:checked + .scan_type_slider {
  background-color: #fc0000a8;
}

input:focus + .scan_type_slider {
  box-shadow: 0 0 1px #0388f5ab;
}

input:checked + .scan_type_slider:before {
  -webkit-transform: translateX(115px);
  -ms-transform: translateX(115px);
  transform: translateX(115px);
}

.scan_type_container{
   margin-top: 1%;
   display: flex;
}

.active_text{
   margin-right: 3%;
}

/* The switch - the box around the slider */
.switch {
   position: relative;
   display: inline-block;
   width: 60px;
   height: 34px;
   margin-left:auto;
   margin-top: 1%;
   margin-right: 5%;
}

.switch-container{
   display: flex;
   margin-bottom: -3%;
}

/*Get rid of original box*/
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}


.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider {
  background-color: #12e912;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

.settings-container{
   display: inline-block;
   padding: 2%;
   width: 50%;

   background-color: #2e3683;
   border-radius: 30px;
   margin-left: 30%;
   margin-top: 2%;
}


.output-container{
   display: inline-block;
   padding:5%;
   color: white;
   background-color: #2e3683;
   border-radius: 30px;
   padding-bottom: 1%;
   width: 90%;
   margin-left: 15%;
}

.output-nav{
   background-color: #2e6883;
   padding: 2%;
   margin-top: -6.1%;
   margin-left: 0%;
   width: 100%;
   border-radius: 30px;
}
.output-nav div{
   display: inline;
   /*background-color: #91b7c9;*/
}

.addresses-button{
   float: right;
   padding: 2%;
   margin-top: -2%;
   margin-right: -2.5%;
   padding-left: 20%;
   border-radius: 30px;
   text-align: center;
   font-size: 20px;
   transition-duration: 0.5s;
}

.addresses-button:hover{
   cursor: pointer;
   font-weight: bold;
}

.console-button{
   padding: 2.2%;
   margin-top: -3.5%;
   margin-left: -2.5%;
   padding-right: 20%;
   border-radius: 30px;
   text-align: center;  
   transition-duration: 0.5s;
   font-size: 20px;
}

.console-button:hover{
   cursor: pointer;
   font-weight: bold;
}

.output-text-class{
   position: relative;
    overflow-y: scroll;
    height: 450px;
    width: 100%;
    resize: none;
    margin-bottom: -5%;
    margin-top: 0.5%;
}

.view_scan_button{
   background-color: #2196F3;
   width: 20%;
   height: 5%;
   margin-top: 7%;
   margin-bottom: 1%;
   padding: 0.7%;
   text-decoration: none;
   border: none;
   color: white;
   font-size: 15px;
   box-shadow: 0 3px #999;
   border-radius: 10px;
}

.refresh_button{
   background-color: #2196F3;
   float: right;
   width: 20%;
   height: 5%;
   margin-top: 7%;
   margin-bottom: 1%;
   padding: 0.7%;
   text-decoration: none;
   border: none;
   color: white;
   font-size: 15px;
   box-shadow: 0 3px #999;
   border-radius: 10px;
}

.refresh_button:hover{
   cursor: pointer;
   filter: brightness(110%);
}

.refresh_button:active {
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}

.view_scan_button:hover{
   cursor: pointer;
   filter: brightness(110%);
}

.view_scan_button:active {
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}

.row{
   padding-top: 150px;
}

.settings-title{
   text-align: center;
   font-size: 40px;
   font-weight: bold;
}

.setting_gap{
   border: 1.5px solid rgb(248, 246, 246);
   margin-top: 2%;
   margin-bottom: 2%;

}

.output-msg-container{
   text-align: center;
   margin: 2% auto;
   border-radius: 10px;
   width: 40%;
   
}

#output-msg{
   font-size: 20px;
   border-radius: 10px;
}

.image-container{
   margin-left: 35%;
   margin-top: 6%;
}

.scroll_down_image{
   position: absolute;
   top: 66%;
   left: 45%;
   transition: opacity 0.5s ease;
   animation: mover 5s infinite  alternate-reverse;
}

.scroll_down_image:hover{
   cursor: pointer;
   -webkit-animation: mover 1s infinite  alternate;
   animation: mover 1s infinite  alternate;
}

@-webkit-keyframes mover {
    0% { transform: translateY(0); }
    100% { transform: translateY(25%); }
}

@keyframes mover {
    0% { transform: translateY(0); }
    100% { transform: translateY(25%); }
}


</style>
<html>
   <head>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
      <meta charset="utf-8">
      <title>Scanner Dashboard</title>
   </head>

<%- include ('./partials/nav'); %>

<body>
   
   <div class="row">
      <div class="col-6">
         <div class="output-container">
            <nav class="output-nav">
               <div id='console' class="console-button" onclick="console_click()">Console</div>
               <div id='address' class="addresses-button" onclick="address_click()">Addresses</div>
            </nav>
            <div class="output-msg-container"><p id="output-msg">Output</p></div>
            <textarea id='output-text' class='output-text-class'></textarea>
            <img onclick="scroll_textArea_down()" class="scroll_down_image" id="scroll_down_image" src="/images/arrows-down.png" height="60" width="60">
            <button id="refresh_button" class="refresh_button" onclick="button_click()">Clear</button>
            <button id="view_scan_button" class="view_scan_button" onclick="scan_log_click()">View log</button>
            
         </div>
      </div>

   <div class="col-6">
      <div class="image-container">
         <img id="status" src="" width="350" height="100">
      </div>
      <div class="settings-container">
         <p class="settings-title">Settings</p>
         <hr class="setting_gap">
         <div class="switch-container">
            <p>Debug mode:</p>
            <label class="switch">
               <input onclick='change_settings()' type="checkbox" id="debug_mode">
               <span class="slider round"></span>
            </label>
         </div>
         <hr class="setting_gap">
         <div class="switch-container">
            <p>Verbose mode:</p>
            <label class="switch">
               <input onclick='change_settings()' type="checkbox" id="verbose_mode">
               <span class="slider round"></span>
            </label>
         </div>
         <hr class="setting_gap">
         <div class="switch-container">
            <p>Alerts:</p>
            <label class="switch">
               <input onclick='change_settings()' type="checkbox" id="send_email">
               <span class="slider round"></span>
            </label>
         </div>
         <hr class="setting_gap">
         <div class="switch-container">
            <p>Spider targets:</p>
            <label class="switch">
               <input onclick='change_settings()' type="checkbox" id="spider">
               <span class="slider round"></span>
            </label>
         </div>
         <hr class="setting_gap">
         <div class="switch-container">
            <p>Save reports:</p>
            <label class="switch">
               <input onclick='change_settings()' type="checkbox" id="save_reports">
               <span class="slider round"></span>
            </label>
         </div>
         <hr class="setting_gap">
         <div class="scan_type_container">
            <p class="passive_text">Passive</p>
            <label class="scan_type_switch">
               <input onclick='change_settings()' type="checkbox" id="scan_type">
               <span class="scan_type_slider round"></span>
            </label>
            <p class="active_text">Active</p>
         </div>
      </div>
   </div>
</div>
   <div class="row">
      <div class="col-4">
         <div class="high_info_display" onclick="test()">
            <h1>High alert: <%= alerts.High_Alert %></h1>
         </div>
      </div>
      <div class="col-4">
         <div class="medium_info_display">
            <h1>Medium alert: <%= alerts.Medium_Alert %></h1>
         </div>
      </div>
      <div class="col-4">
         <div class="low_info_display">
            <h1>Low alert: <%= alerts.Low_Alert %></h1>
         </div>
      </div>
   </div>
   <div class="row">
      <div class="col-6">
         <div class="vuln_container">
            <h2>Recent scans: </h2>
         </div>
      </div>
</body>


<script>
   //Needed for showing user different views
   var view = 'console'

   //Updates image every 10 seconds. Needs to be random element to stop browser reusing image in cache
   const url = "https://cronitor.io/badges/uKVpG4/production/iVvSLth_Vq5UwQMd0yDkm40Ivjg.svg"
   var image = document.getElementById("status")
   image.src = url
   

   setInterval(function(){
      var image = document.getElementById("status")
      image.src = url + "?rand=" + Math.random()
   }, 7000)

   //Alerts the user if there is a high risk. 
   if ('<%= alerts.High_Alert %>' > 0){
      //alert('ACTION NEEDED. Web server with high risk vulnerability found.')
      stylesheet = document.styleSheets[0]
      stylesheet.insertRule('.high_info_display {animation: blinking 1s infinite;}', 0)
   } else{
      element = document.getElementsByClassName('high_info_display')
      element[0].style.backgroundColor = 'darkgreen'
   }

   //Alerts the user when there is a medium risk
   if ('<%= alerts.Medium_Alert %>' > 10){
      stylesheet = document.styleSheets[0]
      stylesheet.insertRule('.medium_info_display {animation: blinking 1s infinite;}', 0)
   }else if ('<%= alerts.Medium_Alert %>' > 1){
      element = document.getElementsByClassName('medium_info_display')
      element[0].style.backgroundColor = 'orange'
   }else{
      element = document.getElementsByClassName('medium_info_display')
      element[0].style.backgroundColor = 'darkgreen'
   }

   if ('<%= alerts.Low_Alert %>' > 20){
      element = document.getElementsByClassName('low_info_display')
      element[0].style.backgroundColor = 'orange'
   } else{
      element = document.getElementsByClassName('low_info_display')
      element[0].style.backgroundColor = 'darkgreen'
   }

   //If user changes settings send them to server
   function change_settings(){
      let debug = document.getElementById('debug_mode').checked
      let verbose = document.getElementById('verbose_mode').checked
      let email = document.getElementById('send_email').checked
      let spider = document.getElementById('spider').checked
      let save_reports = document.getElementById('save_reports').checked
      let scan_type = document.getElementById('scan_type').checked  

      const xhr = new XMLHttpRequest();
      const url = '/scan-settings'
      const params = '?verbose='+verbose+'&debug='+debug+'&email='+email+'&spider='+spider+'&save_reports='+save_reports+'&scan_type='+scan_type
      xhr.open("GET", url+params, true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
               console.log('Recieved')
            };
         }
         xhr.send()
   }

   //Load the settings
   function get_checked_settings(){
      const xhr = new XMLHttpRequest();
      xhr.open("GET", '/scan-settings', true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
               var settings = JSON.parse(xhr.responseText);
               document.getElementById('verbose_mode').checked = (settings['verbose'] === 'true')
               document.getElementById('debug_mode').checked = (settings['debug'] === 'true')
               document.getElementById('send_email').checked = (settings['email'] === 'true')
               document.getElementById('spider').checked = (settings['spider'] === 'true') 
               document.getElementById('save_reports').checked = (settings['save_reports'] === 'true')
               document.getElementById('scan_type').checked = (settings['scan_type'] === 'true')       
            };
      }
      xhr.send()
   }
   get_checked_settings()

   function address_click(){
      view = 'addresses'

      let address = document.getElementById("address")
      address.style.backgroundColor="#91b7c9";
      address.style.fontWeight = 'bold'

      let console = document.getElementById("console")
      console.style.backgroundColor="#2e6883";
      console.style.fontWeight = 'normal'

      document.getElementById('refresh_button').innerHTML = 'Save'
      document.getElementById('output-text').readOnly = false

      get_addresses()
   }

   function console_click(){
      view = 'console'
      let console = document.getElementById("console")
      console.style.backgroundColor="#91b7c9";
      console.style.fontWeight = 'bold'

      let address = document.getElementById("address")
      address.style.backgroundColor="#2e6883";
      address.style.fontWeight = 'normal'

      document.getElementById('refresh_button').innerHTML = 'Clear'
      document.getElementById('output-text').readOnly = true

      update_console()
   }

   function update_console(){
      const xhr = new XMLHttpRequest();
      xhr.open("GET", '/console', true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
               document.getElementById('output-text').value = xhr.responseText
            };
      }
      xhr.send()
   }

   function clear_console(){
      document.getElementById('output-text').value = ""
      const xhr = new XMLHttpRequest();
         const params = '?clear=true'
         xhr.open("GET", '/console'+params, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
               if (xhr.readyState === 4 && xhr.status === 200) {
                  update_console()
               };
         }
         xhr.send()
   }

   function button_click(){
      if (view == 'console'){
         clear_console()
      }else{
         send_addresses()
      }
   }

   function get_addresses(){
      const xhr = new XMLHttpRequest();
      xhr.open("GET", '/address_list', true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
               document.getElementById('output-text').value = xhr.responseText
            };
      }
      xhr.send()
   }

   function send_addresses(){
      let data = document.getElementById('output-text').value
      const xhr = new XMLHttpRequest();
      const output_msg = document.getElementById("output-msg")
      xhr.open("POST", '/edit_addresses', true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = async function () {
            await sleep(200)
            if (xhr.readyState === 4 && xhr.status === 200) {
               output_msg.style.backgroundColor = 'green'
               output_msg.innerHTML = 'Saved'
               output_msg.style.visibility = 'visible'
               await sleep(6000)
               output_msg.style.visibility = 'hidden'
            }else{
               output_msg.style.backgroundColor = 'red'
               output_msg.innerHTML = 'Error'
               output_msg.style.visibility = 'visible'
               await sleep(10000)
               output_msg.style.visibility = 'hidden'
            }
      }
      xhr.send(JSON.stringify({addresses: data}))
   }

   function scroll_textArea_down(){
      const textarea = document.getElementById('output-text')
      textarea.scrollBy({ 
         top: textarea.scrollHeight,
         left: 0, 
         behavior: 'smooth' 
      });
   }



   function scan_log_click(){
      const xhr = new XMLHttpRequest();
      const textarea = document.getElementById('output-text')
      xhr.open("GET", '/scan_log', true);
         xhr.setRequestHeader("Content-Type", "application/json");
         xhr.onreadystatechange = function () {
            textarea.value += xhr.responseText
            scroll_textArea_down()
         }
      xhr.send()
   }

   setInterval(function(){
      if (view == 'console'){
         update_console()
      }
   },4000)

   //Function to pause the code
   function sleep(ms) {
      return new Promise((resolve) => {
         setTimeout(resolve, ms);
      });
   }

   setInterval(function(){
      get_checked_settings()
   },30000)
   
   
   console_click()
   document.getElementById("output-msg").style.visibility = 'hidden'

   const scroll_img = document.getElementById("scroll_down_image")
   scroll_img.style.opacity = 0

   //Make scroll button appear and dissapear based on users scroll on the page
   document.getElementById('output-text').addEventListener('scroll', event => {
    const {scrollHeight, scrollTop, clientHeight} = event.target;

    if (Math.abs(scrollHeight - clientHeight - scrollTop) > 1) {
      scroll_img.style.opacity = 100
    }
    if (Math.abs(scrollHeight - clientHeight - scrollTop) < 1) {
      scroll_img.style.opacity = 0
    }
   });
   
</script>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js" integrity="sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS" crossorigin="anonymous"></script>

</html>